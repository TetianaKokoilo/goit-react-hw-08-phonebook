{"version":3,"file":"static/js/944.1dd21cbd.chunk.js","mappings":"kPAGaA,EAAaC,EAAAA,GAAAA,KAAH,6FAMVC,EAAcD,EAAAA,GAAAA,MAAH,2RAiBXE,EAAaF,EAAAA,GAAAA,GAAH,uJAQVG,EAAmBH,EAAAA,GAAAA,OAAH,gZ,8BChChBI,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAGtBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAEnBC,GAAyBC,EAAAA,EAAAA,IACpC,CAACP,EALyB,SAAAC,GAAK,OAAIA,EAAMO,MAAV,IAM/B,SAACN,EAAUM,GACT,OAAON,EAASM,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cADf,GAG/B,I,mBCFUE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXV,GAAQW,EAAAA,EAAAA,IAAYZ,GACpBF,GAAWc,EAAAA,EAAAA,IAAYhB,GAC7B,GAAoCiB,EAAAA,EAAAA,UAAS,CAC3CP,KAAM,GACNQ,OAAQ,KAFV,eAAOC,EAAP,KAAmBC,EAAnB,KAiCA,OACE,UAACzB,EAAD,CAAY0B,SA7BO,SAAAC,GACnBA,EAAEC,iBACFH,EAAc,CACZV,KAAM,GACNQ,OAAQ,KAEWhB,EAASsB,MAC5B,SAAAf,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBS,EAAcV,KAAKC,aAAtD,MAKPG,GAASW,EAAAA,EAAAA,IAAWN,IAElBd,GACFqB,EAAAA,GAAAA,MAAYrB,EAAMsB,SAWrB,EAGC,WACE,SAAC7B,EAAD,oBACA,SAACD,EAAD,CACE+B,KAAK,OACLlB,KAAK,OACLmB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,SAACjC,EAAD,sBACA,SAACD,EAAD,CACE+B,KAAK,MACLlB,KAAK,SACLmB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,SAAChC,EAAD,CAAkB6B,KAAK,SAAvB,4BAGL,ECnEYI,EAAapC,EAAAA,GAAAA,EAAH,+CAGVqC,EAAarC,EAAAA,GAAAA,GAAH,oHAMVsC,EAActC,EAAAA,GAAAA,GAAH,wMAUXuC,EAAsBvC,EAAAA,GAAAA,OAAH,kXCfnBwC,EAAc,WACzB,IAAMlC,GAAWc,EAAAA,EAAAA,IAAYV,GACvBQ,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACkB,EAAD,UACG/B,EAASmC,KAAI,gBAAGC,EAAH,EAAGA,GAAI5B,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,OAAb,OACZ,UAACgB,EAAD,YACE,UAACF,EAAD,WAAatB,EAAb,QACA,SAACsB,EAAD,UAAad,KACb,SAACiB,EAAD,CAAqBP,KAAK,SAASW,QAAS,kBAAMzB,GAAS0B,EAAAA,EAAAA,IAAcF,GAA7B,EAA5C,sBAHgBA,EADN,KAWnB,ECpBYG,EAAc7C,EAAAA,GAAAA,MAAH,uHAOX8C,EAAoB9C,EAAAA,GAAAA,MAAH,8S,UCJjB+C,EAAS,WACpB,IAAM7B,GAAWC,EAAAA,EAAAA,MACjB,OACE,UAAC0B,EAAD,oCAEE,SAACC,EAAD,CAAmBd,KAAK,OAAOgB,SAAU,SAACC,GAAD,OAAW/B,GAASgC,EAAAA,EAAAA,GAAUD,EAAME,OAAOC,OAA3C,MAG9C,ECkBD,EArBiB,WAKf,IAAMlC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAkC,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,MACV,GAAE,CAACpC,KAGF,4BACE,sCACA,SAACD,EAAD,KACA,SAAC8B,EAAD,KACA,SAACP,EAAD,MAGL,C","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["\nimport styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const StyledInput = styled.input`\n  width: 350px;\n  height: 45px;\n  border-radius: 30px;\n  padding-left: 20px;\n  font-weight: 400;\n  font-size: 17px;\n  line-height: 20px;\n  color: #555555;\n  border: 0.5px solid #000000;\n\n  &:hover,\n  &:focus {\n    border: 2px solid #3346ab;\n  }\n`;\n\nexport const StyledName = styled.h2`\n  font-weight: 300;\n  font-size: 22px;\n  line-height: 26px;\n  color: #000000;\n  margin-top: 15px;\n  margin-bottom: 15px;\n`;\nexport const StyledFormButton = styled.button`\n  margin-top: 30px;\n  width: 349px;\n  height: 50px;\n  background: #3346ab;\n  box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2);\n  border-radius: 30px;\n  color: #ffffff;\n  font-size: 17px;\n  line-height: 20px;\n  border: none;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background: #405df8;\n    box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2);\n    transition: 1s;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport {\n  StyledInput,\n  StyledForm,\n  StyledName,\n  StyledFormButton,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectError, selectContacts } from '../../redux/contacts/selectors';\nimport { toast } from 'react-hot-toast';\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const [newContact, setNewContact] = useState({\n    name: '',\n    number: '',\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setNewContact({\n      name: '',\n      number: '',\n    });\n        const isRepeat = contacts.some(\n      contact => contact.name.toLowerCase() === setNewContact.name.toLowerCase()\n    );\n    if (isRepeat) {\n      return;\n    } else {\n      dispatch(addContact(newContact))\n    }\n    if (error) {\n      toast.error(error.message);\n    }\n    // const form = e.target;\n    // const [name, number] = form.elements;\n\n    // const credentials = {\n    //   name: name.value,\n    //   number: number.value,\n    // };\n    // dispatch(addContact(credentials));\n    // form.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <StyledName>Name</StyledName>\n      <StyledInput\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <StyledName>Number</StyledName>\n      <StyledInput\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <StyledFormButton type=\"submit\">Add Contacts</StyledFormButton>\n    </StyledForm>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledText = styled.p`\n  text-align: center;\n`;\nexport const StyledList = styled.ul`\n  padding-left: 15px;\n  padding-right: 30px;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const StyledItems = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n  color: #555555;\n  font-size: 15px;\n  line-height: 18px;\n  margin-bottom: 10px;\n`;\nexport const StyledContactButton = styled.button`\n  background: #ffffff;\n  color: #405df8;\n  width: 80px;\n  height: 25px;\n  box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2);\n  border-radius: 30px;\n  border: 0.5px solid #dddddd;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background: #405df8;\n    color: #ffffff;\n    box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2);\n    transition: 1s;\n  }\n`;\n","\nimport { StyledText, StyledList, StyledItems, StyledContactButton } from './ContactList.styled'\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n  return (\n    <StyledList>\n      {contacts.map(({ id, name, number }) => (\n        <StyledItems key={id}>\n          <StyledText>{name}:</StyledText>\n          <StyledText>{number}</StyledText>\n          <StyledContactButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </StyledContactButton>\n        </StyledItems>\n      ))}\n    </StyledList>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledLabel = styled.label`\ncolor: #777777;\nfont-style: italic;\nfont-weight: 600;\nfont-size: 16px;\nline-height: 26px;\n`\nexport const StyledFilterInput = styled.input`\n  width: 180px;\n  height: 25px;\n  border-radius: 5px;\n  padding-left: 10px;\n  font-weight: 400;\n  font-size: 17px;\n  line-height: 20px;\n  color: #555555;\n  border: 0.5px solid #000000;\n  margin-left: 15px;\n  &:hover,\n  &:focus {\n    border: 2px solid #3346ab;\n  }\n`","// import PropTypes from 'prop-types';\nimport { StyledLabel, StyledFilterInput } from './Filter.styled';\nimport { useDispatch } from 'react-redux'; \nimport { setFilter } from '../../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <StyledLabel>\n      Find contacts by name\n      <StyledFilterInput type=\"text\" onChange={(event) => dispatch(setFilter(event.target.value))} />\n    </StyledLabel>\n  );\n};\n\n// Filter.propTypes = {\n//   filter: PropTypes.func,\n// }","import { ContactForm, ContactList, Filter } from 'components';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n// import {\n//   selectContacts,\n//   selectError,\n//   selectIsLoading,\n// } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  // const contacts = useSelector(selectContacts);\n  // const isLoading = useSelector(selectIsLoading);\n  // const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h2>Contacts</h2>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledForm","styled","StyledInput","StyledName","StyledFormButton","selectContacts","state","contacts","items","selectError","error","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","useState","number","newContact","setNewContact","onSubmit","e","preventDefault","some","addContact","toast","message","type","pattern","title","required","StyledText","StyledList","StyledItems","StyledContactButton","ContactList","map","id","onClick","deleteContact","StyledLabel","StyledFilterInput","Filter","onChange","event","setFilter","target","value","useEffect","fetchContacts"],"sourceRoot":""}